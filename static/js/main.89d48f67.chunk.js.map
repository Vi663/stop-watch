{"version":3,"sources":["components/counter/Counter.jsx","utils/timeFormat.js","components/buttons/Buttons.jsx","components/App/App.js","index.js"],"names":["Counter","totalSeconds","useState","counter","setCounter","useEffect","hour","Math","floor","minute","seconds","hh","mm","ss","setTimeFormat","className","Buttons","buttons","map","button","idx","type","id","App","setTotalSeconds","buttonArray","btnStart","document","getElementById","btnStop","btnResume","btnReset","observer","next","prevState","error","err","console","complete","log","subscription","setInterval","subscribe","unsubscribe","myObservable","interval","btnStartClick","fromEvent","btnStopClick","btnResumeClick","btnResetClick","disabled","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.89d48f67.chunk.js","sourcesContent":["import { interval, fromEvent } from 'rxjs';\r\nimport { throttleTime, map } from 'rxjs/operators';\r\nimport { useState, useEffect } from 'react'\r\nimport { setTimeFormat } from \"../../utils/timeFormat\";\r\n\r\nexport function Counter({ totalSeconds }) {\r\n  const [counter, setCounter] = useState({})\r\n  useEffect(() => {\r\n    setCounter(setTimeFormat(totalSeconds))\r\n  }, [counter, totalSeconds])\r\n  const { hh, mm, ss } = counter;\r\n  // const { hours, mins, secs } = counter;\r\n  // const buttonStart = document.getElementById('start-btn')\r\n  // const buttonStop = document.getElementById('stop-btn')\r\n\r\n  // const observer = {\r\n  //   next: () => {\r\n  //     setTotalseconds((prevState) => (prevState++));\r\n  //     setCounter(() => ({ hours: Math.floor(totalseconds / 3600), mins: Math.floor((totalseconds - hours * 3600) / 60), secs: totalseconds - (hours * 3600 + mins * 60) }));\r\n  //   },\r\n  // error: err => console.error('Observer got an error: ' + err),\r\n  // complete: () => {console.log('done')},\r\n  // };\r\n\r\n  // let myObservable = interval(1000);\r\n\r\n  // const startCounter = () => {\r\n  //   buttonStart.disabled = true\r\n  //   myObservable.subscribe(observer)\r\n  // }\r\n  // const stopCounter = () => {\r\n  //   myObservable.unsubscribe()\r\n  //   buttonStart.disabled = false\r\n  // }\r\n  // fromEvent(document, 'click')\r\n  // .pipe(\r\n  //   throttleTime(300),\r\n  //   map(event => console.log(event.target))\r\n  // )\r\n  // buttonStop.addEventListener('click', stopCounter())\r\n  \r\n  return (\r\n    <div className=\"container d-flex justify-content-center\">\r\n      {/* {(mm >= 60) ? \r\n      : ''} */}\r\n      <span className=\"mx-3 my-5 px-2 fs-2 bg-success bg-gradient\">HH: {hh} </span>\r\n      <span className=\"mx-3 my-5 px-2 fs-2 bg-success bg-gradient\">MM: {mm} </span>\r\n      <span className=\"mx-3 my-5 px-2 fs-2 bg-success bg-gradient\">SS: {ss} </span>\r\n      <hr />\r\n    </div>\r\n  )\r\n}","export const setTimeFormat = (totalSeconds) => {\r\n  const hour = Math.floor(totalSeconds /3600);\r\n  const minute = Math.floor((totalSeconds - hour*3600)/60);\r\n  const seconds = totalSeconds - (hour * 3600 + minute * 60);\r\n\r\n  const formatedHours = (hour < 1 || hour > 23)\r\n    ? '00'\r\n    : (hour < 10) ? `0${hour}` : `${hour}`;\r\n  const formatedMinutes = (minute < 10)\r\n    ? ((minute === 0) ? '00' : `0${minute}`)\r\n    : `${minute}`;\r\n  const formatedSeconds = (seconds < 10) ? `0${seconds}` : `${seconds}`;\r\n\r\n  return {hh: formatedHours, mm: formatedMinutes, ss: formatedSeconds};\r\n};","export function Buttons({ buttons }) {\r\n  return (\r\n    <div className=\"container\">\r\n      <ul className=\"list-group-horizontal btn-group-lg d-flex justify-content-between\">\r\n        {buttons.map((button, idx) => (\r\n          // <li key={idx} className=\"list-group-item\" >\r\n            <button type='button' id={button} className=\"btn btn-outline-secondary\" >{button}</button>\r\n          // </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}","import { interval, fromEvent, from, Observable } from 'rxjs';\nimport { throttleTime, map } from 'rxjs/operators';\nimport { useState, useEffect } from 'react'\nimport {Counter} from '../counter/Counter'\nimport { Buttons } from \"../buttons/Buttons\";\n\nexport function App() {\n  const [totalSeconds, setTotalSeconds] = useState(0)\n  const [buttonArray, setButtonArray] = useState(['Start', 'Stop', 'Resume', 'Reset'])\n\n  const btnStart = document.getElementById('Start')\n  const btnStop = document.getElementById('Stop')\n  const btnResume = document.getElementById('Resume')\n  const btnReset = document.getElementById('Reset')\n  \n  useEffect(() => {\n\n    const observer = {\n      next: () => {\n        setTotalSeconds((prevState) => prevState + 1);\n      },\n      error: err => console.error('Observer got an error: ' + err),\n      complete: () => { console.log('done') },\n    };\n\n    const subscription = () => {\n      setInterval(() => { }, 1000).subscribe(observer)\n    }\n    \n    const unsubscribe = () => {\n      subscription.unsubscribe()\n    }\n\n    const myObservable = interval(1000);\n    const btnStartClick = fromEvent(btnStart, 'click')\n    const btnStopClick = fromEvent(btnStop, 'click')\n    const btnResumeClick = fromEvent(btnResume, 'click')\n    const btnResetClick = fromEvent(btnReset, 'click')\n    btnStartClick.subscribe(() => {\n      btnStart.disabled = true\n      btnStop.disabled = false\n      btnResume.disabled = false\n      console.log('btnStart pushed')\n      myObservable.subscribe(observer)\n    })\n    btnStopClick.subscribe(() => {\n      // setButtonArray((prevState) => [...prevState, 'Resume', 'Reset'])\n      btnStart.disabled = false\n      btnStop.disabled = true\n      btnResume.disabled = false\n      unsubscribe()\n      console.log('btnStop pushed')\n    })\n    btnResumeClick.subscribe(() => {\n      btnStart.disabled = true\n      btnStop.disabled = false\n      btnResume.disabled = true\n      myObservable.subscribe(observer)\n      console.log('btnResume pushed')\n    })\n    btnResetClick.subscribe(() => {\n      setTotalSeconds(0)\n      btnStart.disabled = true\n      btnStop.disabled = false\n      btnResume.disabled = true\n      myObservable.subscribe(observer).unsubscribe()\n      console.log('btnReset pushed')\n    })\n    // const subscription = myObservable.subscribe(observer)\n    return () => {\n      \n    }\n  }, [btnReset, btnResume, btnStart, btnStop])\n\n  return (\n    <div className=\"container\">\n      <Counter totalSeconds={totalSeconds}/>\n      <Buttons buttons={buttonArray} />\n    </div>\n  );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App/App';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}